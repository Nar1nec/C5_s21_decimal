#test s21_negate_0
  s21_decimal value = {{0x00000000, 0x00000000, 0x00000000, 0x00000000}}; // 0
  s21_decimal result = {{0x00000000, 0x00000000, 0x00000000, 0x80000000}};
  s21_decimal tmp;
  int ret = s21_negate(value, &tmp);
  ck_assert_int_eq(result.bits[0], tmp.bits[0]);
  ck_assert_int_eq(result.bits[1], tmp.bits[1]);
  ck_assert_int_eq(result.bits[2], tmp.bits[2]);
  ck_assert_int_eq(result.bits[3], tmp.bits[3]);
  ck_assert_int_eq(ret, 0);

#test s21_negate_1
  s21_decimal value = {{0x00000001, 0x00000000, 0x00000000, 0x00000000}}; // 1
  s21_decimal result = {{0x00000001, 0x00000000, 0x00000000, 0x80000000}};
  s21_decimal tmp;
  int ret = s21_negate(value, &tmp);
  ck_assert_int_eq(result.bits[0], tmp.bits[0]);
  ck_assert_int_eq(result.bits[1], tmp.bits[1]);
  ck_assert_int_eq(result.bits[2], tmp.bits[2]);
  ck_assert_int_eq(result.bits[3], tmp.bits[3]);
  ck_assert_int_eq(ret, 0);

#test s21_negate_2
  s21_decimal value = {{0x00000001, 0x00000000, 0x00000000, 0x80000000}}; // -1
  s21_decimal result = {{0x00000001, 0x00000000, 0x00000000, 0x00000000}};
  s21_decimal tmp;
  int ret = s21_negate(value, &tmp);
  ck_assert_int_eq(result.bits[0], tmp.bits[0]);
  ck_assert_int_eq(result.bits[1], tmp.bits[1]);
  ck_assert_int_eq(result.bits[2], tmp.bits[2]);
  ck_assert_int_eq(result.bits[3], tmp.bits[3]);
  ck_assert_int_eq(ret, 0);

#test s21_negate_3
  s21_decimal value = {{0x000F4240, 0x00000000, 0x00000000, 0x00020000}}; // -10000
  s21_decimal result = {{0x000F4240, 0x00000000, 0x00000000, 0x80020000}};
  s21_decimal tmp;
  int ret = s21_negate(value, &tmp);
  ck_assert_int_eq(result.bits[0], tmp.bits[0]);
  ck_assert_int_eq(result.bits[1], tmp.bits[1]);
  ck_assert_int_eq(result.bits[2], tmp.bits[2]);
  ck_assert_int_eq(result.bits[3], tmp.bits[3]);
  ck_assert_int_eq(ret, 0);

#test s21_negate_4
  s21_decimal value = {{0xCF5C048C, 0x004D2BEF, 0x00000000, 0x00070000}}; // 2172188218.2812812
  s21_decimal result = {{0xCF5C048C, 0x004D2BEF, 0x00000000, 0x80070000}};
  s21_decimal tmp;
  int ret = s21_negate(value, &tmp);
  ck_assert_int_eq(result.bits[0], tmp.bits[0]);
  ck_assert_int_eq(result.bits[1], tmp.bits[1]);
  ck_assert_int_eq(result.bits[2], tmp.bits[2]);
  ck_assert_int_eq(result.bits[3], tmp.bits[3]);
  ck_assert_int_eq(ret, 0);

#test s21_negate_5
  s21_decimal value = {{0x00000000, 0x00000001, 0x00000000, 0x80000000}}; // -4294967296
  s21_decimal result = {{0x00000000, 0x00000001, 0x00000000, 0x00000000}};
  s21_decimal tmp;
  int ret = s21_negate(value, &tmp);
  ck_assert_int_eq(result.bits[0], tmp.bits[0]);
  ck_assert_int_eq(result.bits[1], tmp.bits[1]);
  ck_assert_int_eq(result.bits[2], tmp.bits[2]);
  ck_assert_int_eq(result.bits[3], tmp.bits[3]);
  ck_assert_int_eq(ret, 0);

#test s21_negate_6
  s21_decimal value = {{0xDC425734, 0x01C068FA, 0x00000000, 0x00070000}}; // 12621621621.2821812
  s21_decimal result = {{0xDC425734, 0x01C068FA, 0x00000000, 0x80070000}};
  s21_decimal tmp;
  int ret = s21_negate(value, &tmp);
  ck_assert_int_eq(result.bits[0], tmp.bits[0]);
  ck_assert_int_eq(result.bits[1], tmp.bits[1]);
  ck_assert_int_eq(result.bits[2], tmp.bits[2]);
  ck_assert_int_eq(result.bits[3], tmp.bits[3]);
  ck_assert_int_eq(ret, 0);

#test s21_negate_7
  s21_decimal value = {{0xCF5C048C, 0x004D2BEF, 0x00000000, 0x00070000}}; // 2172188218.2812812
  s21_decimal *tmp = NULL;
  int ret = s21_negate(value, tmp);
  ck_assert_int_eq(ret, 1);